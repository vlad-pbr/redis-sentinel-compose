version: '3.3'

services:

  redis-instance-1:
    image: $REDIS_IMAGE
    ports:
    - target: 6371
      published: 6371
      protocol: tcp
    networks:
      redis:
    sysctls:
      net.core.somaxconn: 512
    entrypoint: |
      bash -c 'bash -s <<EOF
      "/bin/bash" -c "cat <<EOF > /tmp/redis.conf
      port 0
      tls-port 6371
      tls-cert-file /certs/cert.pem
      tls-key-file /certs/key.pem
      tls-ca-cert-file /certs/ca-cert.pem
      tls-auth-clients no
      tls-replication yes
      replica-announce-ip $ENVIRONMENT_DNS
      replica-announce-port 6371
      masterauth $REDIS_PASSWORD
      min-replicas-to-write 0
      min-replicas-max-lag 5
      repl-timeout 3
      maxmemory 0
      appendonly no
      requirepass $REDIS_PASSWORD
      EOF"
      "/bin/bash" -c "redis-server /tmp/redis.conf"
      EOF'
    secrets:
    - source: cert.pem
      target: /certs/cert.pem
    - source: key.pem
      target: /certs/key.pem
    configs:
    - source: ca.pem
      target: /certs/ca-cert.pem
    deploy:
      mode: replicated
      replicas: 1

  redis-instance-2:
    image: $REDIS_IMAGE
    ports:
    - target: 6372
      published: 6372
      protocol: tcp
    networks:
      redis:
    sysctls:
      net.core.somaxconn: 512
    depends_on:
      - redis-instance-1
    entrypoint: |
      bash -c 'bash -s <<EOF
      "/bin/bash" -c "cat <<EOF > /tmp/redis.conf
      port 0
      tls-port 6372
      tls-cert-file /certs/cert.pem
      tls-key-file /certs/key.pem
      tls-ca-cert-file /certs/ca-cert.pem
      tls-auth-clients no
      tls-replication yes
      replicaof $ENVIRONMENT_DNS 6371
      replica-announce-ip $ENVIRONMENT_DNS
      replica-announce-port 6372
      masterauth $REDIS_PASSWORD
      min-replicas-to-write 0
      min-replicas-max-lag 5
      repl-timeout 3
      maxmemory 0
      appendonly no
      requirepass $REDIS_PASSWORD
      EOF"
      "/bin/bash" -c "redis-server /tmp/redis.conf"
      EOF'
    secrets:
    - source: cert.pem
      target: /certs/cert.pem
    - source: key.pem
      target: /certs/key.pem
    configs:
    - source: ca.pem
      target: /certs/ca-cert.pem
    deploy:
      mode: replicated
      replicas: 1

  redis-instance-3:
    image: $REDIS_IMAGE
    ports:
    - target: 6373
      published: 6373
      protocol: tcp
    networks:
      redis:
    sysctls:
      net.core.somaxconn: 512
    depends_on:
      - redis-instance-1
    entrypoint: |
      bash -c 'bash -s <<EOF
      "/bin/bash" -c "cat <<EOF > /tmp/redis.conf
      port 0
      tls-port 6373
      tls-cert-file /certs/cert.pem
      tls-key-file /certs/key.pem
      tls-ca-cert-file /certs/ca-cert.pem
      tls-auth-clients no
      tls-replication yes
      replicaof $ENVIRONMENT_DNS 6371
      replica-announce-ip $ENVIRONMENT_DNS
      replica-announce-port 6373
      masterauth $REDIS_PASSWORD
      min-replicas-to-write 0
      min-replicas-max-lag 5
      repl-timeout 3
      maxmemory 0
      appendonly no
      requirepass $REDIS_PASSWORD
      EOF"
      "/bin/bash" -c "redis-server /tmp/redis.conf"
      EOF'
    secrets:
    - source: cert.pem
      target: /certs/cert.pem
    - source: key.pem
      target: /certs/key.pem
    configs:
    - source: ca.pem
      target: /certs/ca-cert.pem
    deploy:
      mode: replicated
      replicas: 1

  redis-sentinel-1:
    image: $REDIS_IMAGE
    ports:
    - target: 26371
      published: 26371
      protocol: tcp
    networks:
      redis:
    sysctls:
      net.core.somaxconn: 512
    depends_on:
      - redis-instance-1
      - redis-instance-2
      - redis-instance-3
    entrypoint: |
      bash -c 'bash -s <<EOF
      "/bin/bash" -c "cat <<EOF > /tmp/sentinel.conf
      port 0
      tls-port 26371
      tls-cert-file /certs/cert.pem
      tls-key-file /certs/key.pem
      tls-ca-cert-file /certs/ca-cert.pem
      tls-auth-clients no
      tls-replication yes
      sentinel monitor app $ENVIRONMENT_DNS 6371 2
      sentinel down-after-milliseconds app 1000
      sentinel parallel-syncs app 2
      sentinel failover-timeout app 1000
      sentinel auth-pass app $REDIS_PASSWORD
      sentinel resolve-hostnames yes
      sentinel announce-hostnames yes
      sentinel announce-ip $ENVIRONMENT_DNS
      sentinel announce-port 26371
      requirepass $REDIS_PASSWORD
      EOF"
      "/bin/bash" -c "redis-server /tmp/sentinel.conf --sentinel"
      EOF'
    secrets:
    - source: cert.pem
      target: /certs/cert.pem
    - source: key.pem
      target: /certs/key.pem
    configs:
    - source: ca.pem
      target: /certs/ca-cert.pem
    deploy:
      mode: replicated
      replicas: 1

  redis-sentinel-2:
    image: $REDIS_IMAGE
    ports:
    - target: 26372
      published: 26372
      protocol: tcp
    networks:
      redis:
    sysctls:
      net.core.somaxconn: 512
    depends_on:
      - redis-instance-1
      - redis-instance-2
      - redis-instance-3
    entrypoint: |
      bash -c 'bash -s <<EOF
      "/bin/bash" -c "cat <<EOF > /tmp/sentinel.conf
      port 0
      tls-port 26372
      tls-cert-file /certs/cert.pem
      tls-key-file /certs/key.pem
      tls-ca-cert-file /certs/ca-cert.pem
      tls-auth-clients no
      tls-replication yes
      sentinel monitor app $ENVIRONMENT_DNS 6371 2
      sentinel down-after-milliseconds app 1000
      sentinel parallel-syncs app 2
      sentinel failover-timeout app 1000
      sentinel auth-pass app $REDIS_PASSWORD
      sentinel resolve-hostnames yes
      sentinel announce-hostnames yes
      sentinel announce-ip $ENVIRONMENT_DNS
      sentinel announce-port 26372
      requirepass $REDIS_PASSWORD
      EOF"
      "/bin/bash" -c "redis-server /tmp/sentinel.conf --sentinel"
      EOF'
    secrets:
    - source: cert.pem
      target: /certs/cert.pem
    - source: key.pem
      target: /certs/key.pem
    configs:
    - source: ca.pem
      target: /certs/ca-cert.pem
    deploy:
      mode: replicated
      replicas: 1

  redis-sentinel-3:
    image: $REDIS_IMAGE
    ports:
    - target: 26373
      published: 26373
      protocol: tcp
    networks:
      redis:
    sysctls:
      net.core.somaxconn: 512
    depends_on:
      - redis-instance-1
      - redis-instance-2
      - redis-instance-3
    entrypoint: |
      bash -c 'bash -s <<EOF
      "/bin/bash" -c "cat <<EOF > /tmp/sentinel.conf
      port 0
      tls-port 26373
      tls-cert-file /certs/cert.pem
      tls-key-file /certs/key.pem
      tls-ca-cert-file /certs/ca-cert.pem
      tls-auth-clients no
      tls-replication yes
      sentinel monitor app $ENVIRONMENT_DNS 6371 2
      sentinel down-after-milliseconds app 1000
      sentinel parallel-syncs app 2
      sentinel failover-timeout app 1000
      sentinel auth-pass app $REDIS_PASSWORD
      sentinel resolve-hostnames yes
      sentinel announce-hostnames yes
      sentinel announce-ip $ENVIRONMENT_DNS
      sentinel announce-port 26373
      requirepass $REDIS_PASSWORD
      EOF"
      "/bin/bash" -c "redis-server /tmp/sentinel.conf --sentinel"
      EOF'
    secrets:
    - source: cert.pem
      target: /certs/cert.pem
    - source: key.pem
      target: /certs/key.pem
    configs:
    - source: ca.pem
      target: /certs/ca-cert.pem
    deploy:
      mode: replicated
      replicas: 1

  redisinsight:
    image: $REDISINSIGHT_IMAGE
    networks:
      redis:
        aliases:
        - redisinsight
    environment:
    - RITRUSTEDORIGINS=https://$ENVIRONMENT_DNS:8001
    deploy:
      mode: replicated
      replicas: 1

  redisinsight-proxy:
    image: $REDISINSIGHT_PROXY_IMAGE
    networks:
      redis:
    ports:
    - target: 8001
      published: 8001
      protocol: tcp
    entrypoint: |
      bash -c 'bash -s <<EOF
      "/bin/bash" -c "cat <<EOF > /tmp/haproxy.cfg
      global
          user        haproxy
          group       haproxy
          daemon

          log stdout format raw local0 debug

      defaults
          option                      redispatch
          retries                     3
          timeout http-request        10s
          timeout queue               1m
          timeout connect             10s
          timeout client              300s
          timeout server              300s
          timeout http-keep-alive     10s
          timeout check               10s
          maxconn                     20000
          log global

      userlist app
          user admin insecure-password $REDIS_PASSWORD

      frontend redisinsight-front
          bind *:8001 ssl crt /certs
          mode http
          option httplog
          http-request auth unless { http_auth(app) }
          http-request set-header Origin https://$ENVIRONMENT_DNS:8001
          default_backend redisinsight-back

      backend redisinsight-back
          balance roundrobin
          mode http
          server redisinsight redisinsight:8001
      EOF"
      "/bin/bash" -c "haproxy -db -f /tmp/haproxy.cfg"
      EOF'
    secrets:
    - source: cert.pem
      target: /certs/cert.pem
    - source: key.pem
      target: /certs/cert.pem.key
    deploy:
      mode: replicated
      replicas: 1

networks:
  redis:

secrets:
  cert.pem:
    external: true
  key.pem:
    external: true

configs:
  ca.pem:
    external: true